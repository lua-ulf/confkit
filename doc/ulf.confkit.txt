================================================================================
INTRODUCTION                                                       *ulf.confkit*

ConfKit ...


ulf.confkit                                                      *ulf.confkit*




================================================================================
TYPES                                                        *ulf.confkit.types*

ulf.confkit.types                                          *ulf.confkit.types*



ulf.confkit.types.FieldTypeOptions        *ulf.confkit.types.FieldTypeOptions*
    Options for a field registration


ulf.confkit.types.FieldType                      *ulf.confkit.types.FieldType*
    Represents a configurable field type in the Confkit library.

    Fields: ~
        {id}          (string)                              A unique
                                                            identifier for the
                                                            field type.
        {description} (string)                              A human-readable
                                                            description of the
                                                            field type, used
                                                            for documentation
                                                            and context.
        {validators}  (ulf.confkit.validator_fn[])          A list of
                                                            validator
                                                            functions that
                                                            validate values
                                                            assigned to fields
                                                            of this type.
        {opts}        (ulf.confkit.types.FieldTypeOptions)  Optional.
                                                            Additional options
                                                            that define
                                                            specific behavior
                                                            or constraints for
                                                            the field type.


ulf.confkit.types.Registry                        *ulf.confkit.types.Registry*
    Maintains the registered fields

    Fields: ~
        {_fields} (ulf.confkit.types.field_map)  map of field IDs to fields


M.FieldType.new({id}, {description}, {validators})         *M.FieldType.new()*
    comment


    Parameters: ~
        {id}          (string)  The ID of the field which has the form
                                'confkit:field_name'
        {description} (string)  The description of the field
        {validators}  (ulf)     .confkit.validator_chain: Chain of validator
                                functions to validate the field value before
                                it is written


(id, description, validators, opts)
	if M.Registry._fields[id]({id}, {description}, {validators}) *(id, description, validators, opts)
	if M.Registry._fields[id]()*
    comment


    Parameters: ~
        {id}          (string)  The ID of the field
        {description} (string)  The description for the field
        {validators}  (ulf)     .confkit.validator_chain: Chain of validator
                                functions to validate the field value before
                                it is written


M.is_valid_type({id})                                      *M.is_valid_type()*
    comment


    Parameters: ~
        {id} (string)

    Return: ~
        boolean


M.get({id})                                                          *M.get()*
    comment


    Parameters: ~
        {id} (string)

    Return: ~
        ulf.confkit.types.FieldType



================================================================================
`ulf.confkit.spec` is responsible for parsing and using specification tables

`ulf.confkit.spec.field` functions for field specifications

`ulf.confkit.spec.ctable` functions for ctable specifications


General sequence processing for a field:
  1. user needs to parse a spec
  2. `ulf.confkit.spec.field.parse` is called
  3. if the parser detects errors it raises an error
  4. the output of the parse function is a set of options, for fields:
     ulf.confkit.field.FieldOptions
  5. the constructor `ulf.confkit.field.Field` takes an option set
  6. the pre validation hook is run which sets some reasonable defaults or 
     tries to guess missing values
  7. validation is called, if errors are detected an error is raised
  8. the constructor returns the field



ulf.confkit.spec                                            *ulf.confkit.spec*




 vim:tw=78:ts=8:ft=help:norl:
